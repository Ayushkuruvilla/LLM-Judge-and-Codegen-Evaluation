{"date": "2025-01-12 20:34", "hash": "fe585eb4df8c88d844eeb463ea4d0302", "eval": {"HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from doctest import test, TESTMAX\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n\n    >>> test_cases = [\n        ('010', '110', '100'),\n        ('101', '111', '010'),\n        ('1000', '1111', '0111')\n    ]\n\n    >>> for a, b, expected in test_cases:\n        assert string_xor(a, b) == expected\n\n    \"\"\"\n    result = ''\n    for i in range(min(len(a), len(b))):\n        if len(a) > i and len(b) > i:\n            result += str(int(a[i]) ^ int(b[i]))\n        elif len(a) > i:\n            result += '0'\n        else:\n            result += '1'\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    account_balance = 0\n    for operation in operations:\n        account_balance += operation\n        if account_balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def find_longest_palindrome(s: str) -> str:\n        n = len(s)\n        for i in range(n):\n            if is_palindrome(s[i:]):\n                return s[i:]\n        return ''\n\n    def find_prefix(s: str) -> str:\n        n = len(s)\n        for i in range(n):\n            if is_palindrome(s[:i]):\n                return s[:i]\n        return ''\n\n    longest_palindrome = find_longest_palindrome(string)\n    if not longest_palindrome:\n        return string\n    prefix = find_prefix(string[:len(longest_palindrome)] + longest_palindrome[::-1])\n    return prefix + longest_palindrome[::-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xyz"]], "plus_fail_tests": [["race"]]}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\nfrom unittest import TestCase, main\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"List cannot be empty\")\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1.0, 2.0, 3.0, 4.0, 5.0], 1.0]]}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefix = string[:i]\n        prefixes.append(prefix)\n    return prefixes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[""]], "plus_fail_tests": [["Hello there!"]]}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + list(intersperse(numbers[1:], delimeter))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 3, 2], 8]], "plus_fail_tests": [[[1, 2, 3], 0]]}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separate nested parentheses groups into separate strings and return the list of those.\n    \"\"\"\n    def find_group(paren_string, start_index=0, group=[]):\n        open_count, close_count = 0, 0\n        for i, char in enumerate(paren_string[start_index:]):\n            if char == '(':\n                open_count += 1\n            elif char == ')':\n                close_count += 1\n                if open_count > close_count:\n                    return group + find_group(paren_string, start_index + i + 1, [])\n            if open_count == close_count:\n                group_str = paren_string[start_index + open_count: start_index + close_count + 1]\n                group.append(group_str)\n                return group\n        return group\n\n    groups = find_group(paren_string)\n    return [group for group in groups if group]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(()()) ((())) () ((())()())"]], "plus_fail_tests": [["()"]]}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from collections import deque\nfrom typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    levels = []\n    parentheses_stack = deque()\n\n    for group in paren_string.split():\n        for char in group:\n            if char == '(':\n                parentheses_stack.append(char)\n            elif char == ')':\n                parentheses_stack.pop()\n                levels.append(len(parentheses_stack))\n\n    return levels", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(()()) ((())) () ((())()())"]], "plus_fail_tests": [["((()))"]]}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    sum_val, product_val = 0, 1\n    for number in numbers:\n        sum_val += number\n        product_val *= number\n\n    return (sum_val, product_val)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n\n    rolling_maximum = [numbers[0]]\n    for num in numbers[1:]:\n        rolling_maximum.append(max(num, rolling_maximum[-1]))\n    return rolling_maximum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    max_length = max(map(len, strings))\n    return next((string for string in strings if len(string) == max_length), None)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += len(substring)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["cacacacac", "cac"]], "plus_fail_tests": [["ababa", "aba"]]}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string representing musical notes in a special ASCII format and returns a list of integers\n    corresponding to the number of beats each note lasts.\n\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for note in music_string:\n        if note in notes:\n            beats.append(notes[note])\n        elif note == '.':\n            beats.append(1)  # If there's a single dot without a vertical bar, it's considered a quater note\n        else:\n            raise ValueError(f\"Invalid note '{note}' found in the music string.\")\n    return beats", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["o o o o"]], "plus_fail_tests": [["o o| o| o|"]]}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\nfrom collections import Counter\nnumbers = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_list = numbers.keys()\n    number_counts = Counter(number_list)\n    sorted_numbers = [num for num, count in sorted(number_counts.items(), key=lambda item: item[1]) for _ in range(count)]\n    return ' '.join(sorted_numbers)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[""]], "plus_fail_tests": [["four eight two"]]}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count = 1\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.append(i) * count\n            i = max(i - 1, 2)\n    if n > 1:\n        factors.append(n)\n    return list(set(factors))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[10]]}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from doctest import test, TESTMAX\nfrom typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for num in range(1, n):\n        if (num % 11 == 0 or num % 13 == 0) and str(num).count('7') > 0:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[78]], "plus_fail_tests": [[78]]}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "import math\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef fibonacci(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\ndef prime_fib(n: int) -> int:\n    fib_num = 1\n    fib = 1\n    while fib_num < n:\n        fib += 1\n        if is_prime(fib):\n            fib_num += 1\n            if fib_num == n:\n                return fib\n        fib = fibonacci(fib)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[11]]}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split encoded string into groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range(len(s) // 3)]\n    # uncycle elements in each group.\n    groups = [group[1:] + group[0] if len(group) > 2 else group for group in groups]\n    return \"\".join(groups)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["uzfplzjfzcltmdly"]], "plus_fail_tests": [["abcdefghijk"]]}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    result = l[:]\n    even_indices = [i for i, _ in enumerate(result) if i % 2 == 0]\n    sorted_even = sorted(result[i] for i in even_indices)\n    for i, value in enumerate(sorted_even):\n        result[even_indices[i]] = value\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x == 0:\n        return '0'\n\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    result = []\n\n    while x > 0:\n        remainder = x % base\n        x = x // base\n        result.append(digits[remainder])\n\n    return ''.join(reversed(result))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n < 4:\n        return 0\n\n    fib4_sequence = [0, 0, 2] + [0] * (n - 3)\n    for i in range(4, n + 1):\n        fib4_sequence[i] = fib4_sequence[i - 1] + fib4_sequence[i - 2] + fib4_sequence[i - 3] + fib4_sequence[i - 4]\n\n    return fib4_sequence[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[2]]}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"List is empty\")\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    text = text.lower()\n    text = ''.join(c for c in text if c.isalnum())\n    return text == text[::-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["never odd or even"]]}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return (modp(n - 1, p) * modp(n - 1, p) * (p - 1)) % p\n    else:\n        power = modp(n // 2, p)\n        return power * power % p", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 5]], "plus_fail_tests": [[5, 17]]}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(type(1).__instancecheck__, values))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4, 4]]]}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "import unittest\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["tantywccpjkimslotpzs"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n\n    min_diff = float('inf')\n    closest_numbers = None\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_numbers = (numbers[i], numbers[j])\n\n    return closest_numbers", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1.0, 2.0, 5.9, 4.0, 5.0]]], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 3:\n        return False\n\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] > 0:\n                right -= 1\n            else:\n                left += 1\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    return ''.join(c for c in text if c not in vowels)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    sorted_indices = [i for i, x in enumerate(l) if i % 3]\n    unsorted_indices = list(set(range(len(l))) - set(sorted_indices))\n\n    sorted_values = sorted(l[i] for i in sorted_indices)\n    result = [l[i] if i in unsorted_indices else sorted_values.pop(0) for i in range(len(l))]\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], "plus_fail_tests": [[[9, 12, 15, 6, 3, 8, 10, 23, 7]]]}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) < 2 or len(xs) % 2 != 0:\n        raise ValueError(\"xs must have an even number of coefficients and the largest non-zero coefficient.\")\n\n    n = len(xs) // 2\n    coeff = xs[n]\n    root = math.sqrt(-xs[n-1] / coeff)\n\n    return 2 * root * math.sin(math.acos(root)) - xs[0] / coeff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": [[[5, 10, -3, 1]]]}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n\n    return set_s0 == set_s1 or set_s1.issubset(set_s0) or set_s0.issubset(set_s1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["eabcd", "dddddddabc"]], "plus_fail_tests": [["524321", "5432"]]}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [i + 1 for i in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    direction = 1\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            if direction == 1:\n                direction = -1\n            elif direction == -1:\n                return False\n        elif l[i] > l[i - 1]:\n            if direction == -1:\n                direction = 1\n            elif direction == 1:\n                continue\n        else:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 20, 4, 10]]], "plus_fail_tests": [[[10, 9, 8, 7, 6]]]}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15]], "plus_fail_tests": [[100]]}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    if not xs:\n        return []\n\n    result = [0] * len(xs)\n    result[-1] = xs[-1]\n\n    for i in range(1, len(xs)):\n        result[i - 1] = i * xs[i]\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 1, 2, 4, 5]]], "plus_fail_tests": [[[0, 0, 0, 0, 0, 5]]]}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n\n    # Initialize the first three FibFib numbers\n    fibfib_numbers = [0, 0, 1]\n\n    # If n is less than 3, return the corresponding FibFib number\n    if n < 3:\n        return fibfib_numbers[n]\n\n    # Calculate the remaining FibFib numbers\n    for i in range(3, n + 1):\n        fibfib_numbers.append(fibfib_numbers[i - 1] + fibfib_numbers[i - 2] + fibfib_numbers[i - 3])\n\n    # Return the n-th FibFib number\n    return fibfib_numbers[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "import unittest\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(\"aeiouy\")\n    count = 0\n    s = s.lower()\n\n    for char in s:\n        if char in vowels:\n            count += 1\n        elif char == 'y' and s[-1] == 'y':\n            count += 1\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["bye"]], "plus_fail_tests": [["aeiouyaeiouy"]]}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" Check if the given string of brackets is correctly bracketed.\n\n    Returns True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack  # Return True if the stack is empty", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    shifted_digits = x_str[-shift:] + x_str[:-shift]\n    return shifted_digits if len(shifted_digits) == len(x_str) else shifted_digits[::-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[97, 8]], "plus_fail_tests": [[16, 3]]}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c.upper()) for c in s if c.isalpha())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abAB"]], "plus_fail_tests": [["abcd"]]}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "import re\ndef fruit_distribution(s, n):\n    \"\"\"\n    Given a string that represents the number of apples and oranges in a basket,\n    and an integer that represents the total number of fruits in the basket,\n    return the number of mango fruits in the basket.\n    \"\"\"\n    # Extract the number of apples and oranges from the string\n    match = re.search(r'(\\d+) apples and (\\d+) oranges', s)\n    if match:\n        apples, oranges = map(int, match.groups())\n        # Calculate the number of mangoes\n        mangoes = n - apples - oranges\n        return mangoes\n    else:\n        raise ValueError(\"Invalid fruit distribution string format\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    sorted_lst = []\n    current_min = min(lst)\n    sorted_lst.append(current_min)\n    lst.remove(current_min)\n\n    while lst:\n        current_max = max(lst)\n        sorted_lst.append(current_max)\n        lst.remove(current_max)\n\n        current_min = min(lst)\n        sorted_lst.append(current_min)\n        lst.remove(current_min)\n\n    return sorted_lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4]]], "plus_fail_tests": [[[-5, 0, 5, 10]]]}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_values = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_values:\n        return []\n    return min(even_values, key=lambda x: (x[0], x[1]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 2, 3]]], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2]]]}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "import doctest\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the input string to lowercase to ensure case insensitivity\n    string = string.lower()\n\n    # Use a set to store unique characters and count their occurrences\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char)\n\n    # Return the number of distinct characters\n    return len(distinct_chars)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    n = len(arr)\n    count = 0\n    left, right = 0, n - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            count += min(n - left - 1, right - left)\n            arr[left + 1:right] = arr[left + 1:right][::-1]\n            arr[left] = arr[right]\n            right -= 1\n        left += 1\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 5, 4, 7, 9, 6]]], "plus_fail_tests": [[[1, 2, 3, 4, 5]]]}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    \"\"\"\n    Given a non-empty list of positive integers, return the greatest integer that is greater than 0,\n    and has a frequency greater than or equal to the value of the integer itself.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the numbers in reverse order to find the first number that meets the condition\n    for num in reversed(range(1, max(lst) + 1)):\n        if num in freq and freq[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef is_multiply_prime(a):\n    if a < 9 or a > 100:\n        return False\n    for prime in [2, 3, 5]:\n        if a % prime != 0:\n            a //= prime\n            continue\n        if a == prime or is_prime(a):\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[30]], "plus_fail_tests": [[33]]}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    '''\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    # Check if the list is palindromic (balanced)\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the given sides form a valid triangle\n    if (a + b <= c) or (b + c <= a) or (a + c <= b):\n        return -1\n\n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Round the area to 2 decimal points\n    return round(area, 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if x < n:\n        return False\n    if x == 1:\n        return False\n    root = x ** (1/n)\n    return root ** n == x and root.is_integer()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9, 3]], "plus_fail_tests": [[25, 5]]}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "def is_cube(n):\n    \"\"\"\n    Check if a number is a cube of some integer.\n    \"\"\"\n    for i in range(1, int(n**(1/3)) + 1):\n        if i**3 == n:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    If the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n\n    if total1 < total2:\n        return lst1\n    elif total1 > total2:\n        return lst2\n    else:\n        return lst1 if lst1 else lst2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], [""]]]}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format with 'db' prefix and suffix.\"\"\"\n    binary = bin(decimal)[2:]\n    return 'db' + binary.zfill(8) + 'db'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[7]]}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"Check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aabb"]], "plus_fail_tests": [["abcabc"]]}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "import unittest\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 10\n\n    digit_count = 9 * 10 ** (n - 2) + 9 * 10 ** (n - 3)\n    return 2 * digit_count + 9 * 10 ** (n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[6]]}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary_sum = ''\n    while N > 0:\n        binary_sum = str(bin(N % 2))[2] + binary_sum\n        N //= 2\n    return binary_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1000]], "plus_fail_tests": [[10]]}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef prime_length(string):\n    return is_prime(len(string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef hex_key(num):\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for char in num:\n        if is_prime(hex_to_dec[char]):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    if not result:\n        return []\n    result.sort(key=lambda x: x[0])\n    for i in range(len(result)):\n        for j in range(i, len(result)):\n            if result[i][1] == result[j][1]:\n                result[i], result[j] = result[j], result[i]\n                result[j][1] -= 1\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6]], 5]]}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of a given string.\n    \"\"\"\n    words = s.split()\n    ordered_words = [sorted(word) for word in words]\n    return ' '.join(ordered_words)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hi"]], "plus_fail_tests": [["12345"]]}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    return sum(i for i, val in enumerate(lst) if i % 2 == 1 and val % 2 == 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 88]]], "plus_fail_tests": [[[2, 4, 6, 8]]]}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if not array:\n        return array\n\n    sum_of_ends = sum(array[0], array[-1])\n    sorted_array = sorted(array, reverse=(sum_of_ends % 2) == 1)\n    return sorted_array", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5]]], "plus_fail_tests": [[[0, 0, 0, 0]]]}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet down by 2 * n places.\"\"\"\n    rot = 2\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            new_char = chr((ord(char) - ascii_offset + rot) % 26 + ascii_offset)\n            result += new_char\n        else:\n            result += char\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hi"]], "plus_fail_tests": [["abcde"]]}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    Returns None if there is no such element.\n    \"\"\"\n    if not lst:\n        return None\n\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n\n    return sorted_lst[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1]]], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]]}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a given string of words.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    Example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Initialize the boredom counter\n    boredom_count = 0\n\n    # Split the input string into sentences\n    sentences = S.split(\". \")\n    sentences += S.split(\"! \")\n    sentences += S.split(\"? \")\n\n    # Iterate through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\" and has at least one non-space character\n        if sentence.strip().startswith(\"I\") and sentence.strip():\n            # Increment the boredom counter\n            boredom_count += 1\n\n    # Return the boredom count\n    return boredom_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": [["I am very happy today. I love spending time with my friends."]]}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "import string\ndef encode(message):\n    vowels = string.ascii_lowercase[0:5]\n    vowel_offset = 2\n    encoded_message = \"\"\n\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char in vowels:\n                    encoded_char = chr((ord(char) + vowel_offset - 1) % 26 + ord('a'))\n                else:\n                    encoded_char = chr((ord(char) - ord('a') + 1) % 26 + ord('a'))\n            else:\n                encoded_char = char.upper()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["TEST"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict_):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict_:\n        return False\n\n    key_case = set(dict_.keys())[0].isupper()\n    for key in dict_.keys():\n        if key.islower() != key_case:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"p": "pineapple", "b": "banana"}]], "plus_fail_tests": [[{"FIRST_NAME": "John", "LAST_NAME": "DOE", "AGE": 35, "CITY": "NEW YORK", "INCOME": "$50,000"}]]}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef count_up_to(n):\n    primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[2]]}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "import re\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = set('AEIOU')\n    upper_vowels = set()\n    for i, char in enumerate(s.upper()):\n        if char in vowels and i % 2 == 0:\n            upper_vowels.add(char)\n    return len(upper_vowels)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aBCdEf"]], "plus_fail_tests": [["abcDEf"]]}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n\n    # Convert the input string to float\n    num = float(value)\n\n    # Define the rounding function that rounds away from zero\n    def round_away_from_zero(num):\n        return math.floor(num) if num < 0 else math.ceil(num)\n\n    # Find the closest integers and round them away from zero\n    closest_ints = [int(num) for num in map(round_away_from_zero, [num - 0.5, num + 0.5])]\n\n    # If the numbers are equidistant, return the one that is the farthest from zero\n    return max(closest_ints, key=lambda x: abs(x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["10"]], "plus_fail_tests": [["-2.8"]]}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return (a % 10) * (b % 10)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-6, -9]]}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    Splits a string of words separated by commas or spaces into an array of words.\n\n    Args:\n        s (str): A string of words separated by commas or spaces.\n\n    Returns:\n        list: An array of the words in the given string.\n\n    Examples:\n        >>> words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        True\n        >>> words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        True\n    \"\"\"\n    # Replace multiple spaces and commas with a single space\n    s = s.replace(\" , \", \" \").replace(\" ,\", \" \").replace(\" , \", \" \").replace(\" ,\", \" \")\n    # Split the string by spaces and return the resulting list of words\n    return s.split()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hi, my name is John"]], "plus_fail_tests": [[",,,,"]]}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Iterate through the range from x to y, checking for even numbers\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            return num\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12, 15]], "plus_fail_tests": [[20, 30]]}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m + 1))\n    avg = total // (m - n + 1)\n\n    binary_avg = bin(avg)[2:]\n    if len(binary_avg) < 4:\n        binary_avg = \"0\" * (4 - len(binary_avg)) + binary_avg\n\n    return f\"0b{binary_avg}\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 5]], "plus_fail_tests": [[1, 1]]}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_odd_digits(n):\n        return all(d % 2 != 0 for d in list(str(n)))\n\n    return sorted(filter(has_odd_digits, x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 33, 1422, 1]]], "plus_fail_tests": [[[257, 369, 781, 409]]]}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    valid_numbers = [str(i) for i in arr if 1 <= i <= 9]\n    if not valid_numbers:\n        return []\n\n    sorted_numbers = sorted(valid_numbers, reverse=True)\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = [names[int(num)] for num in sorted_numbers]\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 1, 1, 4, 5, 8, 2, 3]]], "plus_fail_tests": [[[9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def factorial(n):\n    \"\"\"\n    Calculate the factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\ndef f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    result = [0] * n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result[i - 1] = factorial(i)\n        else:\n            result[i - 1] = sum(range(1, i + 1))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Counts the number of elements in the array that have a sum of digits greater than 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n\n    def sum_of_digits(n):\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    return sum(1 for n in arr if sum_of_digits(abs(n)) > 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    grade_map = {\n        (4.0,): \"A+\",\n        (3.7,): \"A\",\n        (3.3,): \"A-\",\n        (3.0,): \"B+\",\n        (2.7,): \"B\",\n        (2.3,): \"B-\",\n        (2.0,): \"C+\",\n        (1.7,): \"C\",\n        (1.3,): \"C-\",\n        (1.0,): \"D+\",\n        (0.7,): \"D\",\n        (0.0,): \"D-\",\n        0.0: \"E\"\n    }\n\n    grades = sorted(grades)\n    result = []\n    for gpa in grades:\n        for threshold, letter_grade in grade_map.items():\n            if gpa > min(threshold):\n                result.append(letter_grade)\n                break\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4.0, 3, 1.7, 2, 3.5]]], "plus_fail_tests": [[[3.8, 2.5, 3.9, 2.2, 1.0]]]}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\ndef even_odd_palindrome(n):\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_count += 1\n        elif is_palindrome(i):\n            odd_count += 1\n    return even_count, odd_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    lst1_even = [num for num in lst1 if num % 2 == 0]\n    lst2_odd = [num for num in lst2 if num % 2 != 0]\n\n    if len(lst1_even) >= len(lst1) and len(lst2_odd) >= len(lst1):\n        return \"NO\"\n\n    for num in lst1:\n        if num % 2 != 0:\n            if len(lst2_odd) > 0:\n                lst1.remove(num)\n                lst2_odd.pop(0)\n                lst1_even.append(num)\n\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4], [1, 5, 3, 4]]], "plus_fail_tests": [[[2, 4, 6], [1, 3, 5]]]}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits,\n    return a list. Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i, s in enumerate(lst):\n        count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{i+1}ng {i+1} of the {len(lst)}nput.\")\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["1234567"]]], "plus_fail_tests": [[["2468"]]]}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    max_val = max(arr)\n    min_val = min(arr)\n\n    if max_val - min_val > arr.__len__() - 1:\n        return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 5, 10, 1, 2]]], "plus_fail_tests": [[[8, 7, 6, 5, 4, 3, 2, 1]]]}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return min_sum if min_sum != float('inf') else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 4, 1, 2, 4]]], "plus_fail_tests": [[[2, 4, -1, 3, 5, -4, 1, -2]]]}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n\n    letter_count = {}\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    max_count = max(letter_count.values())\n    result = {k: v for k, v in letter_count.items() if v == max_count}\n    return result if len(result) > 1 else result.keys()[0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["b b b b a"]], "plus_fail_tests": [["x y z x y z x"]]}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def is_consonant(char):\n    vowels = set(\"aeiouAEIOU\")\n    return char.isalpha() and char not in vowels\n\ndef select_words(s, n):\n    words = s.split()\n    result = []", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Mary had a little lamb", 4]], "plus_fail_tests": [["apple banana cherry", 3]]}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "import math\ndef max_fill(grid, capacity):\n    \"\"\"\n    Given a rectangular grid of wells, find the minimum number of times to lower the buckets to empty the wells.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    water = [0] * n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                water[j] += 1\n\n    # Find the maximum water level in each column\n    max_water = [max(water)] * n\n\n    # Calculate the number of times to lower the buckets\n    times = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                if water[j] > 0:\n                    water[j] -= min(capacity, water[j])\n                    max_water[j] = max(max_water[j] - min(capacity, water[j]), 0)\n                    times += math.ceil(max_water[j] / capacity)\n                else:\n                    max_water[j] = 0\n\n    return times", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1]], "plus_fail_tests": [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2]]}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    if not word or len(word) < 3:\n        return \"\"\n\n    for i in range(len(word) - 1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n\n    return \"\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["yogurt"]], "plus_fail_tests": [["himute"]]}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    def sort_by_ones_and_then_value(a, b):\n        ones_a = count_ones(a)\n        ones_b = count_ones(b)\n        if ones_a < ones_b:\n            return -1\n        elif ones_a > ones_b:\n            return 1\n        else:\n            return a - b\n\n    return sorted(arr, key=sort_by_ones_and_then_value)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 2, 3, 4]]], "plus_fail_tests": [[[3, 7, 6, 5, 4]]]}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Remove characters in s that are in c\n    filtered_s = ''.join(filter(lambda x: x not in c, s))\n\n    # Reverse the filtered string\n    reversed_s = filtered_s[::-1]\n\n    # Check if the filtered string is palindrome\n    is_palindrome = filtered_s == reversed_s\n\n    # Return the filtered string and the palindrome status\n    return filtered_s, is_palindrome", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    \"\"\"\n    Check if it is possible to concatenate the two strings in some order,\n    that the resulting string will be good (balanced parentheses).\n    \"\"\"\n    def is_balanced(s):\n        \"\"\"Check if a single string is balanced.\"\"\"\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) else 'No'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[[")()()()(()()))", "(("]]]}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        words = [str(sum(ord(c) % 2 for c in txt.lower() if c.isalpha()))\n                if txt.isalpha() else []\n                ]\n    return words", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello,world!"]], "plus_fail_tests": [["Hello?"]]}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    return sum(i for i, pos in enumerate(lst) if i % 2 == 0 and i != 0 and i % 3 != 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 8, 7, 1]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-3, -4, 5], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 3]]}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i for i in arr[:k] if len(str(i)) <= 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-99, -88, -77, -66, -55, -44, -33, -22, -11], 5]]}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if not lst:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 2, 3, 4]]], "plus_fail_tests": [[[1, 2, 2, 2, 2, 3, 4]]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid, otherwise False.\"\"\"\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2 and day > days_in_month[1] or (month in [1, 3, 5, 7, 8, 10, 12] and day > days_in_month[month - 1]):\n        return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["04-0-2040"]], "plus_fail_tests": [["04-31-2022"]]}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    def get_odd_numbers(sequence):\n        return sorted([num for num in sequence if num % 2 != 0])\n\n    sequence = collatz(n)\n    return get_odd_numbers(sequence)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "import itertools\nfrom typing import List", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n\n    if end_intersection < start_intersection:\n        return \"NO\"\n\n    length = end_intersection - start_intersection + 1\n    if length > 1 and is_prime(length):\n        return \"YES\"\n\n    return \"NO\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_sign = 1\n    product_magnitude = 1\n\n    for num in arr:\n        product_sign *= (1 if num > 0 else -1 if num < 0 else 1)\n        product_magnitude *= abs(num)\n\n    return product_magnitude * product_sign", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, -4]]], "plus_fail_tests": [[[-1, -2, -2, -4]]]}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "from collections import deque\ndef car_race_collision(n: int) -> int:\n    # Initialize two deques to represent the left-moving and right-moving cars\n    left_cars = deque([i for i in range(1, n + 1)])\n    right_cars = deque([-i for i in range(1, n + 1)] )\n\n    # Simulate the car race by moving the cars one step at a time\n    collisions = 0\n    while left_cars and right_cars:\n        # Move left cars to the right and right cars to the left\n        left_car = left_cars.popleft()\n        right_car = right_cars.pop()\n\n        # If the cars collide, increment the collision count and continue\n        if abs(left_car - right_car) == 1:\n            collisions += 1\n            continue\n\n        # Add the moved cars back to their respective deques\n        left_cars.append(left_car - 1)\n        right_cars.appendleft(-right_car - 1)\n\n    return collisions", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[5]]}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "from itertools import product\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    def is_even(num):\n        return num % 2 == 0\n\n    def iter_combinations(num, k):\n        for i in range(num // k, 0, -1):\n            for j in range(i, 0, -1):\n                if num - (i + j) < j:\n                    break\n                yield (i, j)\n\n    if n < 4 or n % 2 != 0:\n        return False\n\n    for a, b, c, d in itertools.product(range(2, n, 2), repeat=4):\n        if a + b + c + d == n and all(is_even(num) for num in (a, b, c, d)):\n            return True\n\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[20]]}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"Sum of squared numbers in the given list, rounding each element to the nearest integer (ceiling) first.\"\"\"\n    return round(sum(i ** 2 for i in [int(ceil(x)) for x in lst]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[-3, 4, 5, 6, 7]]]}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n if n % 2 != 0 else 0\n\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product or 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2468]], "plus_fail_tests": [[246]]}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    if not string:\n        return False\n\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[][]"]], "plus_fail_tests": [["[[]]]"]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Compare two values and return the larger one in its given type.\n    Returns None if the values are equal.\n    \"\"\"\n\n    # Convert strings to float if possible\n    if isinstance(a, str) and a.replace(\".\", \"\").replace(\",\", \".\").isnumeric():\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str) and b.replace(\".\", \"\").replace(\",\", \".\").isnumeric():\n        b = float(b.replace(\",\", \".\"))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["5,000", 5000]]}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it.\n    If no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4, 3, 5]]], "plus_fail_tests": [[[5, 4, 3, 2, 1]]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    '''\n    if not txt:\n        return False\n\n    last_char = txt[-1]\n    if last_char.isalpha() and not txt.endswith(' '):\n        return True\n\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["apple"]], "plus_fail_tests": [["pUMPKIN PIE"]]}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Exa   mple"]], "plus_fail_tests": [["Hello,   world!"]]}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[3]]}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "import re\ndef file_name_check(file_name):\n    \"\"\"Check if the given file name is valid.\n\n    A valid file name should have the following properties:\n    - Contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n      the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    # Check if the file name contains exactly one dot\n    if not re.match(r'^[a-zA-Z]+\\.[a-zA-Z0-9]{1,3}$', file_name):\n        return 'No'\n\n    # Check if the substring before the dot starts with a letter from the latin alphabet\n    if not re.match(r'^[a-zA-Z]', file_name[:file_name.index('.')]):\n        return 'No'\n\n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    extension = file_name.split('.')[-1].lower()\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["MY16FILE3.exe"]], "plus_fail_tests": [["hello world.exe"]]}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    negative_lst = [num for num in lst if num < 0]\n    positive_lst = [num for num in lst if num > 0]\n\n    if not negative_lst and not positive_lst:\n        return None, None\n\n    if not negative_lst:\n        return None, min(positive_lst)\n\n    if not positive_lst:\n        return max(negative_lst), None\n\n    return max(negative_lst), min(positive_lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n\n    Examples:\n        >>> fib(10)\n        55\n        >>> fib(1)\n        1\n        >>> fib(8)\n        21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[63]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12]]]}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    gcd_num = gcd(x_num * n_den, x_den * n_num)\n    return x_den * n_num // gcd_num == x_num * n_den // gcd_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1/5", "5/1"]], "plus_fail_tests": [["3/4", "4/3"]]}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    break\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[6]], "plus_fail_tests": [[7]]}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    return tuple(sorted(planets[max(index1, index2):min(index1, index2)+1]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Jupiter", "Neptune"]], "plus_fail_tests": [["Neptune", "Mercury"]]}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"\n    Returns the number of elements in the array that are greater than 10 and both\n    first and last digits are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (num // 10 % 2 == 1 and num % 10 % 2 == 1):\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[33, -2, -3, 45, 21, 109]]], "plus_fail_tests": [[[101, -35, 16, 44, -67]]]}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    sorted_nums = sorted(nums, key=digit_sum)\n\n    # Maintain the original order for numbers with the same digit sum\n    return sorted([num for _, num in sorted(zip(range(len(nums)), sorted_nums), key=lambda x: x[0])])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 11, -1, -11, -12]]], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 0 and is_prime(len(word)):\n            result += \" \" + word\n    return result.strip()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    odd_length_free_lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the filtered list first by length, then alphabetically\n    sorted_lst = sorted(odd_length_free_lst, key=len)\n\n    # Sort the remaining strings with odd lengths and append them to the sorted list\n    remaining_odd_length_lst = [word for word in lst if len(word) % 2 != 0]\n    sorted_lst += sorted(remaining_odd_length_lst)\n\n    return sorted_lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["aa", "a", "aaa"]]], "plus_fail_tests": [[["programming", "python", "java", "ruby"]]]}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which returns the value of x if n is a prime number\n    and returns the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 12\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Given a class name and a list of extensions, find the strongest extension and return a string in the format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, choose the one that comes first in the list.\n    \"\"\"\n\n    # Calculate the strength of each extension\n    extension_strengths = [(len(ext.upper()) - len(ext.lower()), ext) for ext in extensions]\n\n    # Sort the extensions by strength in descending order\n    extension_strengths.sort(reverse=True)\n\n    # Find the strongest extension and return the result\n    return f\"{class_name}.{extension_strengths[0][1]}\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Watashi", ["tEN", "niNE", "eIGHt8OKe"]]], "plus_fail_tests": [["Test1", ["UPPERCASE", "uppercase", "1111"]]]}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring in the first word\"\"\"\n\n    # Rotate the second word and check if it's a substring in the first word\n    for i in range(len(b)):\n        if b + b[:i] in a:\n            return True\n\n    # If no rotation of the second word is found, check if the second word itself is a substring\n    if b in a:\n        return True\n\n    # If neither the second word nor any of its rotations are found, return False\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["efef", "fee"]], "plus_fail_tests": [["coffee", "ffeco"]]}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - gm) for g, gm in zip(guess, game)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    roman_dict_small = {5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = ''\n    for num, symbol in roman_dict.items():\n        count = number // num\n        number -= count * num\n        if count > 3:\n            result += roman_dict_small[num] * (count // 5)\n            result += symbol * (count % 5)\n        elif count == 4:\n            result += roman_dict_small[num] + symbol\n        elif count > 0:\n            result += symbol * count\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[19]], "plus_fail_tests": [[111]]}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_count = 0\n\n    for word in words:\n        char_count = len(set(word))\n        if char_count > max_count:\n            max_word = word\n            max_count = char_count\n\n    return max_word", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["name", "enam", "game"]]], "plus_fail_tests": [[["xyz", "pqr"]]]}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list should be equal to the length of operand list minus one.\")\n\n    if not all(isinstance(op, str) for op in operator) or not all(isinstance(num, int) for num in operand):\n        raise TypeError(\"Operator list should be a list of strings, and operand list should be a list of integers.\")\n\n    if not any(op == '+' or op == '-' or op == '*' or op == '//' or op == '**' for op in operator):\n        raise ValueError(\"Operator list should contain at least one basic algebra operation.\")\n\n    if any(num < 0 for num in operand):\n        raise ValueError(\"Operand list should contain only non-negative integers.\")\n\n    expression = operand[0]\n    for i in range(1, len(operand)):\n        operation = operator[i - 1]\n        right_operand = operand[i]\n        if operation == '+':\n            expression += right_operand\n        elif operation == '-':\n            expression -= right_operand\n        elif operation == '*':\n            expression *= right_operand\n        elif operation == '//':\n            expression //= right_operand\n        elif operation == '**':\n            expression **= right_operand\n\n    return expression\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["+", "*", "-"], [2, 3, 4, 5]]], "plus_fail_tests": [[["+", "-", "*", "//"], [5, 2, 3, 4, 7]]]}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    total_eaten = number + min(need, remaining)\n    return [total_eaten, remaining - total_eaten + number]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "import re\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    def is_even(n):\n        return n % 2 == 0\n\n    def digits_from_number(n):\n        return list(map(int, re.findall(r'\\d', str(n))))\n\n    def filter_even_digits(digits):\n        return list(filter(is_even, digits))\n\n    if a > b:\n        a, b = b, a\n\n    a_digits = digits_from_number(a)\n    b_digits = digits_from_number(b)\n\n    result = sorted(filter_even_digits(a_digits))\n    result.extend(filter_even_digits(b_digits))\n\n    # Add any missing even digits between the sorted list and b_digits\n    for digit in filter_even_digits(b_digits[::-1]):\n        if digit not in result:\n            result.append(digit)\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 10]], "plus_fail_tests": [[6, 12]]}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"\n    Reverses the case of letters in the given string and keeps non-letters as they are.\n    If the string contains no letters, reverse the string.\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    # If the string contains no letters, reverse the list to get the reversed string\n    if not any(char.isalpha() for char in s):\n        result.reverse()\n\n    return ''.join(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    hashed_text = hashlib.md5(text.encode()).hexdigest()\n    return hashed_text", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    squares = sum(i**2 for i in lst if i.isdigit() and int(i) % 2 != 0 and int(i) >= 0)\n    return squares * 2 if squares else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4]]], "plus_fail_tests": [[[3, 5, 7]]]}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"\n    Returns the first n+1 numbers of the Tribonacci sequence.\n    \"\"\"\n    sequence = [3]  # Initialize the sequence with the first term\n    if n > 1:\n        sequence.append(1)  # Add the second term\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + sequence[i - 1] // 2)\n        else:\n            next_terms = [sequence[i - 1], sequence[i - 2], sequence[i]]\n            sequence.append(sum(next_terms))\n\n    return sequence", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while pile[-1] % 2 == 0:\n        pile.append(pile[-1] + 2)\n    for _ in range(len(pile) - 2):\n        pile.append(pile[-1] + 1 if pile[-1] % 2 else pile[-1] + 2)\n    return pile", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\ndef skjkasdkd(lst):\n    max_prime = max(filter(is_prime, lst))\n    return sum_of_digits(max_prime)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n       even_odd_count(-12) ==> (1, 1)\n       even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even, count_odd = 0, 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return count_even, count_odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[-78]], "plus_fail_tests": [[-111]]}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return \" \".join(str(i) for i in range(n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}, "pass_at_k": {"base": {"pass@1": 0.36585365853658536}, "plus": {"pass@1": 0.3231707317073171}}}